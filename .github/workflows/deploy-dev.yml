name: Deploy msigportal-dev
on: 
  push:
    branches:
      - '*-dev'
  workflow_dispatch:

jobs:
  CodeQL:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Initialize the CodeQL tools for scanning
        uses: github/codeql-action/init@v1.0.20
        with:
          languages: 'javascript'
          queries: security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  Deploy:
    environment: Dev Deployment
    runs-on: self-hosted
    env:
      DOCKER_BUILDKIT: 1
      BACKEND_IMAGE_TAG: backend-${{ github.sha }}
      BACKEND_IMAGE_TAG_LATEST: backend-latest
      FRONTEND_IMAGE_TAG: frontend-${{ github.sha }}
      FRONTEND_IMAGE_TAG_LATEST: frontend-latest
      ECS_WEB_TASK_DEFINITION_FILE: ${{ github.workspace }}/.github/ecs-task-definition-templates/web.json
      ECS_QUEUE_TASK_DEFINITION_FILE: ${{ github.workspace }}/.github/ecs-task-definition-templates/queue.json
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and push backend image to ECR
        env:
          IMAGE_NAME: '${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}'
        run: |
          docker build \
            -t ${{ env.IMAGE_NAME }}:${{ env.BACKEND_IMAGE_TAG }} \
            -t ${{ env.IMAGE_NAME }}:${{ env.BACKEND_IMAGE_TAG_LATEST }} \
            --cache-from ${{ env.IMAGE_NAME }}:${{ env.BACKEND_IMAGE_TAG_LATEST }} \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -f docker/backend.dockerfile \
            ${{ github.workspace }}
          
          docker push ${{ env.IMAGE_NAME }}:${{ env.BACKEND_IMAGE_TAG }}
          docker push ${{ env.IMAGE_NAME }}:${{ env.BACKEND_IMAGE_TAG_LATEST }}
          
      - name: Build and push frontend image to ECR
        env:
          IMAGE_NAME: '${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}'
        run: |
          docker build \
            -t ${{ env.IMAGE_NAME }}:${{ env.FRONTEND_IMAGE_TAG }} \
            -t ${{ env.IMAGE_NAME }}:${{ env.FRONTEND_IMAGE_TAG_LATEST }} \
            --cache-from ${{ env.IMAGE_NAME }}:${{ env.FRONTEND_IMAGE_TAG_LATEST }} \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -f docker/frontend.dockerfile \
            ${{ github.workspace }}
          
          docker push ${{ env.IMAGE_NAME }}:${{ env.FRONTEND_IMAGE_TAG }}
          docker push ${{ env.IMAGE_NAME }}:${{ env.FRONTEND_IMAGE_TAG_LATEST }}

      - name: Scan backend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ env.BACKEND_IMAGE_TAG }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          timeout: '30m'
          output: 'trivy-results-backend.sarif'

      - name: Upload Backend Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results-backend.sarif'

      - name: Scan frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ env.FRONTEND_IMAGE_TAG }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          timeout: '30m'
          output: 'trivy-results-frontend.sarif'

      - name: Upload Frontend Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results-frontend.sarif'

      - name: Configure web task definition file
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.ECS_WEB_TASK_DEFINITION_FILE }}
        env:
          containerDefinitions.0.image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ env.FRONTEND_IMAGE_TAG }}
          containerDefinitions.1.image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ env.BACKEND_IMAGE_TAG }}
          containerDefinitions.0.memoryReservation: 200
          containerDefinitions.1.memoryReservation: 2000
          containerDefinitions.0.mountPoints.0.containerPath: ${{ secrets.CONTAINER_APACHE_LOGS_PATH }}
          containerDefinitions.1.mountPoints.0.containerPath: ${{ secrets.CONTAINER_LOGS_PATH }}
          containerDefinitions.1.mountPoints.1.containerPath: ${{ secrets.CONTAINER_TMP_PATH }}
          containerDefinitions.1.mountPoints.2.containerPath: ${{ secrets.CONTAINER_DATA_PATH }}
          containerDefinitions.1.mountPoints.3.containerPath: ${{ secrets.CONTAINER_CONFIG_PATH }}
          volumes.0.host.sourcePath: ${{ secrets.HOST_APACHE_LOGS_PATH }}
          volumes.1.host.sourcePath: ${{ secrets.HOST_LOGS_PATH }}
          volumes.2.host.sourcePath: ${{ secrets.HOST_TMP_PATH }}
          volumes.3.host.sourcePath: ${{ secrets.HOST_DATA_PATH }}
          volumes.4.host.sourcePath: ${{ secrets.HOST_CONFIG_PATH }}

      - name: Configure queue task definition file
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.ECS_QUEUE_TASK_DEFINITION_FILE }}
        env:
          containerDefinitions.0.image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ env.BACKEND_IMAGE_TAG }}
          containerDefinitions.0.memoryReservation: 2000
          containerDefinitions.0.mountPoints.0.containerPath: ${{ secrets.CONTAINER_LOGS_PATH }}
          containerDefinitions.0.mountPoints.1.containerPath: ${{ secrets.CONTAINER_TMP_PATH }}
          containerDefinitions.0.mountPoints.2.containerPath: ${{ secrets.CONTAINER_DATA_PATH }}
          containerDefinitions.0.mountPoints.3.containerPath: ${{ secrets.CONTAINER_CONFIG_PATH }}
          volumes.0.host.sourcePath: ${{ secrets.HOST_LOGS_PATH }}
          volumes.1.host.sourcePath: ${{ secrets.HOST_TMP_PATH }}
          volumes.2.host.sourcePath: ${{ secrets.HOST_DATA_PATH }}
          volumes.3.host.sourcePath: ${{ secrets.HOST_CONFIG_PATH }}

      - name: Deploy web service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ env.ECS_WEB_TASK_DEFINITION_FILE }}
          service: dev-msigportal-web
          cluster: ${{ secrets.ECS_CLUSTER }}
          force-new-deployment: true

      - name: Deploy queue service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ env.ECS_QUEUE_TASK_DEFINITION_FILE }}
          service: dev-msigportal-queue
          cluster: ${{ secrets.ECS_CLUSTER }}
          force-new-deployment: true

