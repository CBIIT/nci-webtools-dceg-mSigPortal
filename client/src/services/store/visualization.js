import { createSlice } from '@reduxjs/toolkit';
import { mergeObject } from './utils';

export const getInitialState = () => ({
  publicForm: {
    study: '',
    cancer: '',
    strategy: '',
  },
  userForm: {
    inputFilename: '',
    bedFilename: '',
    inputFormat: '',
    genome: '',
    strategy: '',
    mutationSplit: '',
    collapse: false,
    filter: '',
    useQueue: false,
    email: '',
  },
  main: {
    matrixData: [],
    submitted: false,
    source: 'public',
    openSidebar: true,

    loading: {
      active: false,
      content: null,
      showIndicator: false,
    },
    queueExpired: false,
    error: '',
    projectID: '',
    displayTab: 'instructions',
    downloads: {},
    svgList: {},
    matrixList: {},
    statistics: '',
  },
  mutationalProfiles: {
    sample: null,
    profile: null,
    matrix: null,
    filter: null,
    data: [],
    plot: null,
    loading: false,

    filtered: [],
    selectName: '',
    selectProfile: '',
    selectMatrix: '',
    selectFilter: '',
    nameOptions: [],
    profileOptions: [],
    matrixOptions: [],
    filterOptions: [],
    plotPath: '',
  },
  cosineSimilarity: {
    withinForm: { profile: '', matrix: '' },
    referenceForm: { profile: '', signatureSet: '' },
    publicForm: {},

    withinProfileType: '',
    withinMatrixSize: '',
    withinMatrixOptions: [],
    refProfileType: '',
    refSignatureSet: '',
    refSignatureSetOptions: [],
    userProfileType: '',
    userMatrixSize: '',
    userMatrixOptions: [],
    pubStudy: '',
    pubCancerType: '',
    pubCancerTypeOptions: [],
    withinPlotPath: '',
    withinTxtPath: '',
    refPlotPath: '',
    refTxtPath: '',
    pubPlotPath: '',
    pubTxtPath: '',
    display: 'within',
    withinErr: false,
    refErr: false,
    pubErr: false,
    debugR: [],
    withinSubmitOverlay: false,
    refSubmitOverlay: false,
    pubSubmitOverlay: false,
  },
  mutationalPattern: {
    proportion: '',
    pattern: '',
  },
  profileComparison: {
    withinForm: { profile: '', sample1: '', sample2: '' },
    referenceForm: { profile: '', sample: '', signatureSet: '', compare: '' },
    publicForm: {},

    withinProfileType: '',
    withinSampleName1: '',
    withinSampleName2: '',
    sampleOptions: '',
    refProfileType: '',
    refSampleName: '',
    refSignatureSet: '',
    refSignatureSetOptions: [],
    refSignatures: [],
    filterSignatures: [],
    refCompare: '',
    searchFilter: '',
    userProfileType: '',
    userMatrixSize: '',
    userMatrixOptions: '',
    userSampleName: '',
    pubSampleName: '',
    pubSampleOptions: [],
    pubStudy: '',
    pubCancerType: '',
    pubCancerTypeOptions: [],
    withinPlotPath: '',
    refPlotPath: '',
    pubPlotPath: '',
    refErr: false,
    pubErr: false,
    debugR: [],
    withinSubmitOverlay: false,
    refSubmitOverlay: false,
    pubSubmitOverlay: false,
    display: 'within',
  },
  pca: {
    profileType: '',
    signatureSet: '',
    signatureSetOptions: [],
    pca1: '',
    pca2: '',
    pca3: '',
    heatmap: '',
    pca2Data: '',
    pca3Data: '',
    heatmapData: '',
    pca1URL: '',
    pca2URL: '',
    pca3URL: '',
    heatmapURL: '',
    pcaErr: false,
    debugR: [],
    submitOverlay: false,
    userProfileType: '',
    userMatrixSize: '',
    userMatrixOptions: [],
    pubStudy: '',
    pubCancerType: '',
    pubCancerTypeOptions: [],
    pubPca1: '',
    pubPca2: '',
    pubPca3: '',
    pubPca2Data: '',
    pubPca3Data: '',
    pubPca1URL: '',
    pubPca2URL: '',
    pubPca3URL: '',
    display: 'within',
    pubPcaErr: false,
    pubSubmitOverlay: false,
  },
  kataegis: {
    sample: '',
    sampleOptions: '',
    highlight: false,
    min: '5',
    max: '100',
    chromosome: 'None',
    txtPath: '',
    plotPath: '',
    kataegisData: [],
    pagination: {
      pageIndex: 0,
      pageSize: 10,
    },
    hidden: [],
    display: true,
    err: false,
    debugR: [],
    loading: false,
  },
});

export const { actions, reducer } = createSlice({
  name: 'visualization',
  initialState: getInitialState(),
  reducers: {
    mergeVisualization: mergeObject,
    resetVisualization: getInitialState,
  },
});
